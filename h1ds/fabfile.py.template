"""Fabric scripts.

Require mkvirtualenv to  be installed on all machines and  to be run in,
and WORKON_HOME defined in .bash_profile.

This is configured for Ubuntu systems.

22/01/2013: The  current Ubuntu  version of virtualenvwrapper  creates a
permission  error  on ~/.virtualenvs/hook.log  when  sudo  is used.  The
current  workaround is  to not  use the  Ubuntu virtualenv  package, but
install    it   outside    of   apt    -   e.g.     using   pip.     See
https://bugs.launchpad.net/ubuntu/+source/virtualenvwrapper/+bug/870097

"""

from __future__ import with_statement
import os, platform, tempfile, time, stat
from fabric.api import *
from fabric.contrib.files import exists

########################################################################
## Settings
########################################################################

## Staging server.

# Username on staging server
STAGING_USER = "username"
# Hostname or IP address of staging server
STAGING_HOST = "192.168.56.101"
# Either "nginx" or "apache"
STAGING_WEBSERVER = "nginx"

## Production server

# Username on production server
PRODUCTION_USER = "username"
# Hostname or IP address of production server
PRODUCTION_HOST = "server.com"
# Either "nginx" or "apache"
PRODUCTION_WEBSERVER = "apache"

########################################################################
### You should not need to change anything below this line
########################################################################

env.project = "h1ds"
env.git_url = "https://github.com/h1ds/h1ds.git"
def dev():
    """Django development on localhost."""
    env.environment = 'development'
    env.venv = "%(project)s_%(environment)s" %env
    env.mkvirtualenv = "mkvirtualenv --distribute --no-site-packages -p python2"
    env.hosts = ["localhost"]
    env.server_user = os.getuid()
    env.server_group = os.getgid()
    env.webserver = "development" # django dev webserver
    
def staging():
    """Staging server."""
    env.environment = 'staging'
    env.venv = "%(project)s_%(environment)s" %env
    env.user = STAGING_USER
    env.hosts = [STAGING_HOST]
    env.mkvirtualenv = "mkvirtualenv --distribute --no-site-packages -p python2"
    env.server_user = 'www-data'
    env.server_group = 'www-data'
    env.webserver = STAGING_WEBSERVER

def production():
    """Production server."""
    env.environment = 'production'
    env.venv = "%(project)s_%(environment)s" %env
    env.mkvirtualenv = "mkvirtualenv --distribute --no-site-packages -p python2"
    env.user = PRODUCTION_USER
    env.hosts = [PRODUCTION_HOST]
    env.server_user = 'www-data'
    env.server_group = 'www-data'
    env.webserver = PRODUCTION_WEBSERVER

def start_supervisord():
    with prefix('workon %(venv)s && cdvirtualenv' %env):
        run('supervisord -c h1ds/conf/supervisord.%(environment)s.conf' %env, pty=False)

def stop_supervisord():
    with prefix('workon %(venv)s && cdvirtualenv' %env):
        pid_filename = os.path.join("pid", "supervisord.pid")
        if exists(pid_filename):
            pid = int(run('cat %s' %pid_filename))
            run('kill %d' %pid)
            print("waiting for supervisord to shut down")
            while exists(pid_filename):
                time.sleep(1)
            print "done"

def restart_supervisord():
    """Restart supervisord.

    According to http://supervisord.org/running.html, SIGHUP will reload
    config  and  restart  all  processes.   But  this  doesn't  seem  to
    work.  Perhaps  because the  config  file  is  not in  the  standard
    location? Instead we just stop and start the process

    ."""
    stop_supervisord()
    start_supervisord()


def update_dir_structure():
    """Create any missing dirs or files we need. Idempotent."""

    # these dirs, if they exist, need to  be changed to user perms so we
    # can update dir structure without sudo. They are set back to server
    # perms when we've finished.
    server_perms = (
        ('wiki',),
        ('serverfiles',),
        )
    dirs = (
        ('wiki', 'data', 'plugin', 'theme'),
        ('wiki', 'data', 'pages'),
        ('wiki', 'data', 'user'),
        ('static',),
        ('media',),
        ('log',),
        ('db',),
        ('pid',),
        ('serverfiles',),
        )
    touch = (
        ('wiki', 'data', 'plugin', '__init__.py'),
        ('wiki', 'data', 'plugin', 'theme', '__init__.py'),
        )

    with prefix('workon %(venv)s && cdvirtualenv' %env):
        ## Grab the dir so we can use sudo without workon
        env_dir = run('echo $PWD')

    with cd(env_dir):
        server_perm_paths = map(lambda x: os.path.join(*x), server_perms)
        if env.webserver == "apache":
            for sp in server_perm_paths:
                if exists(sp):
                    sudo('chown -R --reference=$PWD %s' %sp)

    with cd(env_dir):
        d_paths = map(lambda x: os.path.join(*x), dirs)
        t_paths = map(lambda x: os.path.join(*x), touch)
        for d in d_paths:
            if not exists(d):
                run('mkdir -p %s' %d)
        for t in t_paths:
            if not exists(t):
                run('touch %s' %t)

    with cd(env_dir):
        with cd("static"):
            if not exists("img"):
                run("ln -s ../h1ds/moin/static/h1ds/img img")

    with cd(env_dir):
        sudo('chmod -R ugo+rwX db')
        if env.webserver == "apache":
            for sp in server_perm_paths:
                if exists(sp):
                    sudo('chown -R %s:%s %s' %(env.server_user, env.server_group, sp))

def setup():
    """To be run once only. Non-idempotent.

    Please avoid making  changes to this function, as they  will need to
    be manually applied to existing projects.
    """

    run('%(mkvirtualenv)s %(venv)s' % env)

    with prefix('workon %(venv)s && cdvirtualenv' %env):
        run('git clone %(git_url)s %(project)s' % env)
        run('pip install fabric')
    update_dir_structure()

def update_supervisord_conf():
    with prefix('workon %(venv)s && cdvirtualenv' %env):
        env_dir = run('echo $PWD')
    template_fn = 'conf/supervisord.%s.conf.template' %(env.environment)
    conf_header = "# DO NOT EDIT THIS FILE DIRECTLY, MAKE CHANGES TO THE TEMPLATE FILE AND RUN fab %s update\n" %(env.environment)
    with open(template_fn) as conf_template:
        conf_text = conf_header + conf_template.read()
    conf_text = conf_text.replace("__venv_dir__", env_dir)
    conf_text = conf_text.replace("__user__", "%(server_user)s" %env)
    with tempfile.NamedTemporaryFile() as new_config_file:
        new_config_file.write(conf_text)
        new_config_file.flush()
        remote_name = '%s/h1ds/conf/supervisord.%s.conf' %(env_dir, env.environment)
        put(new_config_file.name, remote_name)

def update_gunicorn_sh():
    with prefix('workon %(venv)s && cdvirtualenv' %env):
        env_dir = run('echo $PWD')
    template_fn = 'gunicorn.sh.template'
    #conf_header = "# DO NOT EDIT THIS FILE DIRECTLY, MAKE CHANGES TO THE TEMPLATE FILE AND RUN fab %s update\n" %(env.environment)
    #with open(template_fn) as conf_template:
    #    conf_text = conf_header + conf_template.read()
    with open(template_fn) as conf_template:
        conf_text = conf_template.read()
    conf_text = conf_text.replace("__venv_dir__", env_dir)
    conf_text = conf_text.replace("__venv__", env.environment)
    conf_text = conf_text.replace("__user__", "%(server_user)s" %env)
    conf_text = conf_text.replace("__group__", "%(server_group)s" %env)
    with tempfile.NamedTemporaryFile() as new_config_file:
        new_config_file.write(conf_text)
        new_config_file.flush()
        remote_name = '%s/h1ds/gunicorn.%s.sh' %(env_dir, env.environment)
        put(new_config_file.name, remote_name)
    run('chmod a+x '+remote_name)

def update_moin_sh():
    with prefix('workon %(venv)s && cdvirtualenv' %env):
        env_dir = run('echo $PWD')
    template_fn = 'moin.sh.template'
    #conf_header = "# DO NOT EDIT THIS FILE DIRECTLY, MAKE CHANGES TO THE TEMPLATE FILE AND RUN fab %s update\n" %(env.environment)
    #with open(template_fn) as conf_template:
    #    conf_text = conf_header + conf_template.read()
    with open(template_fn) as conf_template:
        conf_text = conf_template.read()
    conf_text = conf_text.replace("__venv_dir__", env_dir)
    conf_text = conf_text.replace("__venv__", env.environment)
    conf_text = conf_text.replace("__user__", "%(server_user)s" %env)
    conf_text = conf_text.replace("__group__", "%(server_group)s" %env)
    with tempfile.NamedTemporaryFile() as new_config_file:
        new_config_file.write(conf_text)
        new_config_file.flush()
        remote_name = '%s/h1ds/moin.%s.sh' %(env_dir, env.environment)
        put(new_config_file.name, remote_name)
    run('chmod a+x '+remote_name)

def update():
    """Can be run multiple times. Idempotent."""

    update_dir_structure()
    env.settings = '%(project)s.settings_%(environment)s' % env

    with prefix('workon %(venv)s && cdvirtualenv' %env):
        env_dir = run('echo $PWD')
        project_dir = os.path.join(env_dir, env.project)

    env.test_mds_dir = os.path.join(env_dir, 'test_mds_data')

    # We assume the user has created the settings file for the requested
    # environment,  and that  it exists  in the  same directory  as this
    # file.  We'll  attempt to copy  it to the virtual  environment, and
    # abort if the copy fails.
    settings_filename = "settings_%(environment)s.py" %env
    with cd(project_dir):
        try:
            env_settings_md5 = run("md5sum "+settings_filename)
        except:
            env_settings_md5 = "dummy_checksum"
    local_settings_md5 = local("md5sum "+settings_filename, capture=True)
    if env_settings_md5 != local_settings_md5:
        try:
            put(settings_filename, project_dir)
        except ValueError:
            print "Cannot copy settings file [%s] to environment. " %settings_filename
            print "Please make sure the file exists."
            return False

    # update the h1ds dir from the repository.
    with cd(project_dir):
        run("git pull")
    
    # set up / refresh wiki directories.
    with cd(env_dir):
        sudo('cp -r %(project)s/moin/underlay wiki' %env)
        sudo('cp %(project)s/conf/h1ds.py wiki/data/plugin/theme' %env)
        if env.webserver == "apache":
            sudo('chown -R %(server_user)s:%(server_group)s wiki' %env)
        sudo('chmod -R ug+rwX wiki')
        sudo('chmod -R o-rwX wiki')

    # Before we make any changes  to the database, we change permissions
    # of the db  directory so we can run ./manage.py  without sudo. Note
    # that we shouldn't run sudo within a virtual environment (i.e. with
    # workon)  as   files  like  $WORKON_DIR/hook.log  can   have  their
    # permissions changed  to those of  the root user, which  will cause
    # problems when subsequent commands are run as a normal user.

    if env.webserver == "apache":
        with cd(env_dir):
            sudo('chown -R --reference=$PWD db')
            sudo('chown -R --reference=$PWD serverfiles')

    with prefix('workon %(venv)s && cdvirtualenv' %env):
        with prefix('cd %(project)s' %env):
            run("pip install -r requirements/requirements.txt")
            # the recalcitrant_requirements file contains packages which
            # needs   those   in    requirements.txt   installed   first
            # (e.g. numpy).
            run("pip install -r requirements/recalcitrant_requirements.txt")
            if env.webserver == "nginx":
                run("pip install -r requirements/requirements_nginx.txt")
            # need server perms to run db through webserver, so use sudo to
            # modify db and make sure we chown the db after to be sure.
            run('./manage.py syncdb --settings=%(settings)s' % env)
            run('./manage.py collectstatic --noinput --settings=%(settings)s' % env)
            run("./manage.py migrate h1ds_core --settings=%(settings)s" % env)
            run("./manage.py migrate h1ds_mdsplus --settings=%(settings)s" % env)
            run("./manage.py migrate h1ds_summary --settings=%(settings)s" % env)
            run("./manage.py migrate h1ds_configdb --settings=%(settings)s" % env)
            run("./manage.py migrate kombu.transport.django --settings=%(settings)s" % env)
            run("./manage.py migrate djcelery --settings=%(settings)s" % env)
            run("./manage.py createtree %(test_mds_dir)s --settings=%(settings)s" % env)
            #run("./manage.py loaddata sphinxdoc_project --settings=%(settings)s" % env)
            #run("./manage.py updatedoc -b h1ds --settings=%(settings)s" % env)
    
    # Now that we  have finished making changes to  the database, change
    # the permissions back to those appropriate for the server.
    if env.webserver == "apache":
        with cd(env_dir):
            sudo('chown -R %(server_user)s:%(server_group)s db' %env)
            sudo('chown -R %(server_user)s:%(server_group)s serverfiles' %env)
    
    if env.webserver != "development":
        update_supervisord_conf()
        update_gunicorn_sh()
        update_moin_sh()
    
    # Now, set up webserver
    if env.webserver == "apache":
        # Create Apache config from template
        conf_header = "# DO NOT EDIT THIS FILE DIRECTLY, MAKE CHANGES TO THE TEMPLATE FILE AND RUN fab %s update\n" %(env.environment)
        with open('conf/apache/h1ds_%s.conf.template' %(env.environment)) as conf_template:
            conf_text = conf_header + conf_template.read()
        conf_text = conf_text.replace("__venv_dir__", env_dir)
        with tempfile.NamedTemporaryFile() as new_config_file:
            new_config_file.write(conf_text)
            new_config_file.flush()
            remote_name = '%s/h1ds/conf/apache/h1ds_%s.conf' %(env_dir, env.environment)
            put(new_config_file.name, remote_name)

        # check if we already have a symlink to apache conf
        h1ds_apache_conf = '/etc/apache2/sites-available/h1ds'
        if not exists(h1ds_apache_conf):
            sudo("ln -s %s/h1ds/conf/apache/h1ds_%s.conf %s" %(env_dir, env.environment, h1ds_apache_conf))
            sudo("a2ensite h1ds")
        sudo('/etc/init.d/apache2 reload')

    elif env.webserver == "nginx":
        # Create nginx config from template
        conf_header = "# DO NOT EDIT THIS FILE DIRECTLY, MAKE CHANGES TO THE TEMPLATE FILE AND RUN fab %s update\n" %(env.environment)
        with open('conf/nginx/h1ds_%s.conf.template' %(env.environment)) as conf_template:
            conf_text = conf_header + conf_template.read()
        conf_text = conf_text.replace("__venv_dir__", env_dir)
        with tempfile.NamedTemporaryFile() as new_config_file:
            new_config_file.write(conf_text)
            new_config_file.flush()
            remote_name = '%s/h1ds/conf/nginx/h1ds_%s.conf' %(env_dir, env.environment)
            put(new_config_file.name, remote_name)

        
            
        # check if we already have a symlink to nginx conf
        h1ds_nginx_conf = '/etc/nginx/sites-enabled/h1ds'
        if not exists(h1ds_nginx_conf):
            sudo("ln -s %s/h1ds/conf/nginx/h1ds_%s.conf %s" %(env_dir, env.environment, h1ds_nginx_conf))
        # clear the pagespeed cache
        sudo('/etc/init.d/nginx stop')
        sudo('rm -rf /var/ngx_pagespeed_cache/*')
        sudo('/etc/init.d/nginx start')
        
    if env.webserver != "development":
        restart_supervisord()
